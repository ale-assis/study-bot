import os
import json
import time
import asyncio
import discord
from constants.constants_prod import Config


class StudyCamMode:
    def __init__(self, client):
        self.client = client
        self.warning_time = 60  # 60 segundos para ligar c√¢mera/transmiss√£o
        self.study_cam_channel_id = Config.Channels.ID_CANAL_VOZ_CAMERA
        self.warning_channel_id = Config.Channels.ID_CANAL_LOG_FOCO

        # Dicion√°rio para armazenar membros que est√£o sendo monitorados (entrada)
        self.monitoring_members = {}

        # NOVO: Dicion√°rio para monitoramento cont√≠nuo de membros no canal
        self.continuous_monitoring = {}

        # NOVO: Dicion√°rio para rastrear expuls√µes do bot
        self.bot_kicked_members = set()

        # Arquivo para persistir dados se necess√°rio
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        data_dir = os.path.join(base_dir, "data")
        os.makedirs(data_dir, exist_ok=True)
        self.data_file = os.path.join(data_dir, "study_cam_data.json")

        self.load_data()

    def load_data(self):
        """Carrega os dados do arquivo JSON"""
        if os.path.exists(self.data_file):
            with open(self.data_file, "r") as f:
                data = json.load(f)
        else:
            self.save_data()

    def save_data(self):
        """Salva os dados no arquivo JSON"""
        data = {
            "last_updated": time.time(),
            "total_warnings": getattr(self, 'total_warnings', 0),
            "total_kicks": getattr(self, 'total_kicks', 0),
            "total_compliances": getattr(self, 'total_compliances', 0)
        }
        os.makedirs(os.path.dirname(self.data_file), exist_ok=True)
        with open(self.data_file, "w") as f:
            json.dump(data, f, indent=4)

    async def handle_voice_state_update(self, member, before, after):
        """Gerencia as mudan√ßas de estado de voz dos membros no canal de estudo com c√¢mera"""

        if self._entered_study_cam_channel(before, after):
            await self._handle_study_cam_enter(member, after)
        elif self._left_study_cam_channel(before, after):
            await self._handle_study_cam_exit(member)
        elif self._updated_in_study_cam_channel(before, after):
            await self._handle_study_cam_update(member, after)

    def _entered_study_cam_channel(self, before, after):
        """Verifica se o membro entrou no canal de estudo com c√¢mera"""
        return ((
                        before.channel is None and after.channel is not None and after.channel.id == self.study_cam_channel_id) or
                (before.channel is not None and before.channel.id != self.study_cam_channel_id and
                 after.channel is not None and after.channel.id == self.study_cam_channel_id))

    def _left_study_cam_channel(self, before, after):
        """Verifica se o membro saiu do canal de estudo com c√¢mera"""
        return (before.channel is not None and before.channel.id == self.study_cam_channel_id and
                (after.channel is None or (
                        after.channel is not None and after.channel.id != self.study_cam_channel_id)))

    def _updated_in_study_cam_channel(self, before, after):
        """Verifica se o membro atualizou o estado no canal de estudo com c√¢mera"""
        return (before.channel is not None and before.channel.id == self.study_cam_channel_id and
                after.channel is not None and after.channel.id == self.study_cam_channel_id)

    def _has_camera_or_screen_share(self, voice_state):
        """Verifica se o membro tem c√¢mera ou transmiss√£o de tela ligada"""
        return voice_state.self_video or voice_state.self_stream

    def _format_time_remaining(self, seconds):
        """Formata o tempo restante de forma mais amig√°vel"""
        if seconds > 30:
            return f"{seconds} segundos ‚è∞"
        elif seconds > 10:
            return f"{seconds} segundos ‚ö†Ô∏è"
        else:
            return f"{seconds} segundos üö®"

    async def _handle_study_cam_enter(self, member, after):
        """Gerencia a entrada no canal de estudo com c√¢mera"""
        print(f"{member} entrou no canal de estudo com c√¢mera {after.channel.name}")

        # NOVO: Remover da lista de expulsos quando entrar novamente
        if member.id in self.bot_kicked_members:
            self.bot_kicked_members.remove(member.id)

        # Se j√° tem c√¢mera ou transmiss√£o ligada, enviar mensagem de boas-vindas
        if self._has_camera_or_screen_share(after):
            warning_channel = self.client.get_channel(self.warning_channel_id)
            if warning_channel:
                embed = discord.Embed(
                    title="‚úÖ Bem-vindo ao Canal de Estudo!",
                    description=f"""Ol√° {member.mention}! 

                    Voc√™ entrou no canal **{after.channel.name}** e j√° est√° com sua c√¢mera/transmiss√£o ligada!

                    **üìö Excelente!** Voc√™ pode continuar estudando tranquilamente.

                    Bons estudos! üìñ‚ú®""",
                    color=0x00FF00  # Verde
                )
                embed.set_thumbnail(
                    url="https://i.postimg.cc/52m91bny/Leonardo-Phoenix-10-A-cute-cartoon-style-wolf-who-is-studying-2-removebg-preview-3.png")
                embed.set_footer(text="Tribunaldo Bot | Tribunas Study")

                # Enviar mensagem que ser√° deletada automaticamente em 30 segundos
                message = await warning_channel.send(embed=embed)
                # Agendar dele√ß√£o da mensagem ap√≥s 30 segundos (sem bloquear)
                asyncio.create_task(self._delete_message_after_delay(message, 30))
            return

        # Criar aviso para membros sem c√¢mera/transmiss√£o
        warning_channel = self.client.get_channel(self.warning_channel_id)
        if warning_channel:
            embed = discord.Embed(
                title="‚ö†Ô∏è Aviso - Canal de Estudo com C√¢mera",
                description=f"""Ol√° {member.mention}! 

                Voc√™ entrou no canal [https://discord.com/channels/1013854219058544720/1380897477108039740] que √© destinado para estudos com c√¢mera/transmiss√£o de tela ligada.

                **üìπ ATEN√á√ÉO:** Voc√™ tem **{self.warning_time} segundos** para ligar sua **c√¢mera** ou **transmiss√£o de tela**.

                Se n√£o ligar uma das duas op√ß√µes dentro deste prazo, ser√° automaticamente expulso do canal.""",
                color=0xFFD700  # Cor dourada para aviso
            )

            embed.add_field(
                name="‚è∞ Tempo restante",
                value=self._format_time_remaining(self.warning_time),
                inline=False
            )

            embed.set_thumbnail(
                url="https://i.postimg.cc/52m91bny/Leonardo-Phoenix-10-A-cute-cartoon-style-wolf-who-is-studying-2-removebg-preview-3.png")
            embed.set_footer(text="Tribunaldo Bot | Tribunas Study")

            warning_message = await warning_channel.send(member.mention, embed=embed)

            # Iniciar monitoramento com contador regressivo
            monitor_task = asyncio.create_task(self._monitor_member_with_countdown(member, warning_message))

            self.monitoring_members[member.id] = {
                'task': monitor_task,
                'entry_time': time.time(),
                'message': warning_message
            }

    async def _handle_study_cam_exit(self, member):
        """Gerencia a sa√≠da do canal de estudo com c√¢mera"""
        print(f"{member} saiu do canal de estudo com c√¢mera")

        # NOVO: Parar monitoramento cont√≠nuo se estiver ativo
        if member.id in self.continuous_monitoring:
            await self._stop_continuous_monitoring(member.id)

        # NOVO: Verificar se foi expulso pelo bot
        if member.id in self.bot_kicked_members:
            print(f"{member} foi expulso pelo bot - n√£o processando como sa√≠da volunt√°ria")
            # Limpar da lista ap√≥s um tempo para permitir nova entrada
            asyncio.create_task(self._clear_kicked_member_after_delay(member.id, 5))
            return

        if member.id in self.monitoring_members:
            monitor_info = self.monitoring_members[member.id]

            if not monitor_info['task'].done():
                monitor_info['task'].cancel()
                print(f"Task de monitoramento cancelada para {member}")

            try:
                current_embed = monitor_info['message'].embeds[0] if monitor_info['message'].embeds else None
                if current_embed and current_embed.title == "‚ùå Expulso do Canal":
                    print(f"Mensagem j√° editada para expuls√£o - n√£o alterando para {member}")
                else:
                    # Calcular tempo que ficou no canal
                    time_in_channel = int(time.time() - monitor_info['entry_time'])

                    embed = discord.Embed(
                        title="üëã Sa√≠da do Canal de Estudo",
                        description=f"{member.mention} saiu do canal de estudo com c√¢mera.",
                        color=0x87CEEB  # Azul claro
                    )
                    embed.add_field(
                        name="‚è±Ô∏è Tempo no canal",
                        value=f"{time_in_channel} segundos",
                        inline=True
                    )
                    embed.add_field(
                        name="‚úÖ Status",
                        value="Sa√≠da volunt√°ria",
                        inline=True
                    )
                    embed.set_footer(text="Volte sempre que quiser estudar!")

                    await monitor_info['message'].edit(embed=embed, content="")

                    # Agendar dele√ß√£o da mensagem ap√≥s 20 segundos (sem bloquear)
                    asyncio.create_task(self._delete_message_after_delay(monitor_info['message'], 30))

            except discord.NotFound:
                print(f"Mensagem de aviso n√£o encontrada para {member}")
            except Exception as e:
                print(f"Erro ao editar mensagem de sa√≠da: {e}")

            del self.monitoring_members[member.id]

    async def _handle_study_cam_update(self, member, after):
        """Gerencia atualiza√ß√µes no estado de voz no canal de estudo"""
        # Verificar se ligou c√¢mera/transmiss√£o durante monitoramento inicial
        if member.id in self.monitoring_members and self._has_camera_or_screen_share(after):
            print(f"{member} ligou c√¢mera/transmiss√£o. Cancelando monitoramento inicial.")

            monitor_info = self.monitoring_members[member.id]

            if not monitor_info['task'].done():
                monitor_info['task'].cancel()

            try:
                # Calcular tempo que levou para ligar
                time_taken = int(time.time() - monitor_info['entry_time'])
                time_remaining = self.warning_time - time_taken

                embed = discord.Embed(
                    title="üéâ C√¢mera/Transmiss√£o Ligada!",
                    description=f"Perfeito, {member.mention}! Voc√™ ligou sua c√¢mera ou transmiss√£o de tela a tempo!",
                    color=0x00FF00  # Verde
                )

                cam_type = "üìπ C√¢mera" if after.self_video else "üñ•Ô∏è Transmiss√£o de tela"
                embed.add_field(
                    name="‚úÖ Tipo ativado",
                    value=cam_type,
                    inline=True
                )
                embed.add_field(
                    name="‚è±Ô∏è Tempo levado",
                    value=f"{time_taken} segundos",
                    inline=True
                )
                embed.add_field(
                    name="‚è∞ Tempo restante",
                    value=f"{time_remaining} segundos",
                    inline=True
                )
                embed.add_field(
                    name="üìö Status",
                    value="‚úÖ Aprovado! Continue estudando!",
                    inline=False
                )
                embed.set_footer(text="Bons estudos! üìñ‚ú®")

                await monitor_info['message'].edit(embed=embed, content="")

                # Deletar mensagem ap√≥s 30 segundos
                asyncio.create_task(self._delete_message_after_delay(monitor_info['message'], 30))

            except discord.NotFound:
                pass
            except Exception as e:
                print(f"Erro ao editar mensagem de sucesso: {e}")

            del self.monitoring_members[member.id]

            # NOVO: Iniciar monitoramento cont√≠nuo
            await self._start_continuous_monitoring(member)

        # NOVO: Verificar mudan√ßas para membros em monitoramento cont√≠nuo
        elif member.id in self.continuous_monitoring:
            if self._has_camera_or_screen_share(after):
                print(f"{member} religou c√¢mera/transmiss√£o - cancelando aviso cont√≠nuo")
                await self._cancel_continuous_warning(member.id)
            # Se n√£o tem c√¢mera/transmiss√£o e n√£o est√° sendo avisado, iniciar aviso
            elif not self.continuous_monitoring[member.id].get('warning_active', False):
                print(f"{member} desligou c√¢mera/transmiss√£o - iniciando aviso cont√≠nuo")
                await self._start_continuous_warning(member)

    async def _monitor_member_with_countdown(self, member, warning_message):
        """Monitora um membro com contador regressivo visual"""
        try:
            start_time = time.time()
            last_update = self.warning_time + 1  # Inicializar com valor maior para for√ßar primeira atualiza√ß√£o

            while True:
                # Calcular tempo decorrido e restante
                elapsed = time.time() - start_time
                remaining = max(0, int(self.warning_time - elapsed))

                print(f"[DEBUG] {member.display_name}: Elapsed={elapsed:.1f}s, Remaining={remaining}s")

                # Se o tempo acabou, expulsar IMEDIATAMENTE
                if elapsed >= self.warning_time:
                    print(f"[DEBUG] Tempo esgotado para {member.display_name}! Expulsando...")
                    await self._kick_member_from_channel(member, warning_message)
                    return

                # Verificar se ainda precisa monitorar - MELHORADO
                try:
                    guild = self.client.get_guild(Config.ID_DO_SERVIDOR)
                    if not guild:
                        print(f"[DEBUG] Servidor n√£o encontrado")
                        return

                    current_member = guild.get_member(member.id)
                    if not current_member:
                        print(f"[DEBUG] {member.display_name} n√£o encontrado no servidor")
                        return

                    # Verificar se ainda est√° no canal
                    if not current_member.voice or not current_member.voice.channel:
                        print(f"[DEBUG] {member.display_name} n√£o est√° em nenhum canal de voz")
                        return

                    if current_member.voice.channel.id != self.study_cam_channel_id:
                        print(f"[DEBUG] {member.display_name} saiu do canal de estudo")
                        return

                    # Verificar se ligou c√¢mera/transmiss√£o
                    if self._has_camera_or_screen_share(current_member.voice):
                        print(f"[DEBUG] {member.display_name} ligou c√¢mera/transmiss√£o!")
                        return

                except Exception as e:
                    print(f"[DEBUG] Erro ao verificar estado do membro: {e}")
                    return

                # Determinar se deve atualizar a mensagem - CORRIGIDO
                should_update = False
                update_intervals = [30, 20, 15, 10, 5, 3, 2, 1]

                for interval in update_intervals:
                    if remaining <= interval and last_update > interval:
                        should_update = True
                        last_update = interval
                        break

                # Atualizar mensagem se necess√°rio
                if should_update:
                    try:
                        original_embed = warning_message.embeds[0]

                        # Criar novo embed baseado no original
                        embed = discord.Embed(
                            title=original_embed.title,
                            description=original_embed.description,
                            color=0xFF6B35 if remaining <= 10 else 0xFFD700
                        )

                        # Manter os campos originais exceto o tempo restante
                        for field in original_embed.fields:
                            if field.name != "‚è∞ Tempo restante":
                                embed.add_field(name=field.name, value=field.value, inline=field.inline)

                        # Atualizar campo de tempo restante
                        embed.add_field(
                            name="‚è∞ Tempo restante",
                            value=self._format_time_remaining(remaining),
                            inline=False
                        )

                        embed.set_thumbnail(url=original_embed.thumbnail.url if original_embed.thumbnail else None)
                        embed.set_footer(text=original_embed.footer.text if original_embed.footer else None)

                        await warning_message.edit(embed=embed)
                        print(f"[DEBUG] Mensagem atualizada para {member.display_name}: {remaining}s restantes")
                    except Exception as e:
                        print(f"Erro ao atualizar countdown: {e}")

                # Aguardar 1 segundo para pr√≥xima verifica√ß√£o
                await asyncio.sleep(1.0)

        except asyncio.CancelledError:
            print(f"Monitoramento de {member} foi cancelado")
        except Exception as e:
            print(f"Erro durante monitoramento de {member}: {e}")
            if member.id in self.monitoring_members:
                del self.monitoring_members[member.id]

    async def _kick_member_from_channel(self, member, warning_message):
        """Expulsa o membro do canal e atualiza a mensagem - MELHORADO"""
        try:
            guild = self.client.get_guild(Config.ID_DO_SERVIDOR)
            if not guild:
                print("Servidor n√£o encontrado")
                return

            current_member = guild.get_member(member.id)
            if not current_member:
                print(f"Membro {member} n√£o encontrado no servidor")
                return

            # Verificar se ainda est√° no canal antes de tentar expulsar
            if not current_member.voice or not current_member.voice.channel:
                print(f"{current_member} n√£o est√° em nenhum canal de voz")
                return

            if current_member.voice.channel.id != self.study_cam_channel_id:
                print(f"{current_member} n√£o est√° mais no canal de estudo")
                return

            # Verificar se ainda n√£o tem c√¢mera/transmiss√£o
            if self._has_camera_or_screen_share(current_member.voice):
                print(f"{current_member} ligou c√¢mera/transmiss√£o no √∫ltimo segundo")
                return

            print(f"Expulsando {current_member} do canal por n√£o ligar c√¢mera/transmiss√£o")

            # NOVO: Marcar como expulso ANTES de fazer a expuls√£o
            self.bot_kicked_members.add(member.id)

            # Atualizar mensagem ANTES de expulsar
            try:
                embed = discord.Embed(
                    title="‚ùå Expulso do Canal",
                    description=f"{member.mention}, voc√™ foi expulso do canal [https://discord.com/channels/1013854219058544720/1380897477108039740] por n√£o ligar sua c√¢mera ou transmiss√£o de tela no tempo limite.",
                    color=0xFF0000  # Vermelho
                )
                embed.add_field(
                    name="üìã Motivo",
                    value="‚è∞ N√£o ligou c√¢mera nem transmiss√£o em 60 segundos",
                    inline=False
                )
                embed.add_field(
                    name="üîÑ Como voltar",
                    value="Voc√™ pode entrar novamente, mas lembre-se de ligar sua c√¢mera ou transmiss√£o!",
                    inline=False
                )
                embed.add_field(
                    name="üí° Dica",
                    value="Entre no canal e j√° ligue a c√¢mera/transmiss√£o para n√£o ser expulso!",
                    inline=False
                )
                embed.set_footer(text="As regras do canal devem ser respeitadas üìã")

                await warning_message.edit(embed=embed, content="")
                print("Mensagem de expuls√£o atualizada com sucesso")

            except Exception as e:
                print(f"Erro ao editar mensagem de expuls√£o: {e}")

            # Expulsar membro - M√âTODOS M√öLTIPLOS PARA GARANTIR FUNCIONAMENTO
            try:
                # M√©todo 1: move_to(None)
                await current_member.move_to(None)
                print(f"{current_member} foi desconectado do canal com move_to(None)")
            except Exception as e1:
                print(f"Erro com move_to(None): {e1}")

                try:
                    # M√©todo 2: edit com channel=None
                    await current_member.edit(voice_channel=None)
                    print(f"{current_member} foi desconectado do canal com edit(voice_channel=None)")
                except Exception as e2:
                    print(f"Erro com edit(voice_channel=None): {e2}")

                    try:
                        # M√©todo 3: disconnect direto
                        await current_member.voice.channel.connect().disconnect()
                        print(f"Tentativa de desconex√£o alternativa para {current_member}")
                    except Exception as e3:
                        print(f"Todos os m√©todos de expuls√£o falharam para {current_member}: {e1}, {e2}, {e3}")

            # Limpar do monitoramento
            if member.id in self.monitoring_members:
                del self.monitoring_members[member.id]

            # Agendar dele√ß√£o da mensagem ap√≥s 60 segundos
            asyncio.create_task(self._delete_message_after_delay(warning_message, 60))

        except Exception as e:
            print(f"Erro geral na expuls√£o de {member}: {e}")

    async def _clear_kicked_member_after_delay(self, member_id, delay_seconds):
        """Remove um membro da lista de expulsos ap√≥s um delay"""
        try:
            await asyncio.sleep(delay_seconds)
            if member_id in self.bot_kicked_members:
                self.bot_kicked_members.remove(member_id)
                print(f"Membro {member_id} removido da lista de expulsos ap√≥s {delay_seconds}s")
        except Exception as e:
            print(f"Erro ao limpar membro expulso: {e}")

    async def _monitor_member(self, member, warning_message):
        """Vers√£o simplificada do monitor (mantida para compatibilidade)"""
        return await self._monitor_member_with_countdown(member, warning_message)

    async def cleanup_monitoring(self):
        """Limpa todos os monitoramentos ativos"""
        # Limpar monitoramento inicial
        for member_id, monitor_info in list(self.monitoring_members.items()):
            if not monitor_info['task'].done():
                monitor_info['task'].cancel()
            del self.monitoring_members[member_id]

        # NOVO: Limpar monitoramento cont√≠nuo
        for member_id in list(self.continuous_monitoring.keys()):
            await self._stop_continuous_monitoring(member_id)

        print("Todos os monitoramentos foram limpos")

    # NOVAS FUN√á√ïES PARA MONITORAMENTO CONT√çNUO

    async def _start_continuous_monitoring(self, member):
        """Inicia o monitoramento cont√≠nuo de um membro no canal"""
        try:
            print(f"Iniciando monitoramento cont√≠nuo para {member}")
            self.continuous_monitoring[member.id] = {
                'member': member,
                'start_time': time.time(),
                'warning_active': False,
                'warning_task': None,
                'warning_message': None
            }
        except Exception as e:
            print(f"Erro ao iniciar monitoramento cont√≠nuo: {e}")

    async def _stop_continuous_monitoring(self, member_id):
        """Para o monitoramento cont√≠nuo de um membro"""
        try:
            if member_id in self.continuous_monitoring:
                monitor_info = self.continuous_monitoring[member_id]

                # Cancelar task de aviso se estiver ativa
                if monitor_info.get('warning_task') and not monitor_info['warning_task'].done():
                    monitor_info['warning_task'].cancel()

                # Deletar mensagem de aviso se existir
                if monitor_info.get('warning_message'):
                    try:
                        await monitor_info['warning_message'].delete()
                    except:
                        pass

                del self.continuous_monitoring[member_id]
                print(f"Monitoramento cont√≠nuo parado para membro ID {member_id}")
        except Exception as e:
            print(f"Erro ao parar monitoramento cont√≠nuo: {e}")

    async def _start_continuous_warning(self, member):
        """Inicia um aviso cont√≠nuo para membro sem c√¢mera/transmiss√£o"""
        try:
            if member.id not in self.continuous_monitoring:
                return

            warning_channel = self.client.get_channel(self.warning_channel_id)
            if not warning_channel:
                return

            embed = discord.Embed(
                title="‚ö†Ô∏è C√¢mera/Transmiss√£o Desligada!",
                description=f"""Aten√ß√£o {member.mention}! 

                Voc√™ **desligou** sua c√¢mera/transmiss√£o de tela no canal [https://discord.com/channels/1013854219058544720/1380897477108039740].

                **üìπ ATEN√á√ÉO:** Voc√™ tem **{self.warning_time} segundos** para **religar** sua **c√¢mera** ou **transmiss√£o de tela**.

                Se n√£o ligar uma das duas op√ß√µes dentro deste prazo, ser√° automaticamente expulso do canal.""",
                color=0xFF6B35  # Laranja para re-aviso
            )

            embed.add_field(
                name="üîÑ A√ß√£o necess√°ria",
                value="Ligue sua c√¢mera üì∑ ou transmiss√£o de tela üñ•Ô∏è **AGORA!**",
                inline=False
            )

            embed.add_field(
                name="‚è∞ Tempo restante",
                value=self._format_time_remaining(self.warning_time),
                inline=False
            )

            embed.set_thumbnail(
                url="https://i.postimg.cc/52m91bny/Leonardo-Phoenix-10-A-cute-cartoon-style-wolf-who-is-studying-2-removebg-preview-3.png")
            embed.set_footer(text="‚ö†Ô∏è Reaviso - Tribunaldo Bot | Tribunas Study")

            warning_message = await warning_channel.send(member.mention, embed=embed)

            # Iniciar task de monitoramento com countdown
            warning_task = asyncio.create_task(
                self._continuous_warning_countdown(member, warning_message)
            )

            # Atualizar informa√ß√µes de monitoramento
            self.continuous_monitoring[member.id].update({
                'warning_active': True,
                'warning_task': warning_task,
                'warning_message': warning_message,
                'warning_start_time': time.time()
            })

        except Exception as e:
            print(f"Erro ao iniciar aviso cont√≠nuo: {e}")

    async def _cancel_continuous_warning(self, member_id):
        """Cancela o aviso cont√≠nuo quando membro liga c√¢mera/transmiss√£o"""
        try:
            if member_id not in self.continuous_monitoring:
                return

            monitor_info = self.continuous_monitoring[member_id]

            if not monitor_info.get('warning_active', False):
                return

            # Cancelar task de aviso
            if monitor_info.get('warning_task') and not monitor_info['warning_task'].done():
                monitor_info['warning_task'].cancel()

            # Atualizar mensagem para sucesso
            if monitor_info.get('warning_message'):
                try:
                    member = monitor_info['member']
                    time_taken = int(time.time() - monitor_info.get('warning_start_time', time.time()))

                    embed = discord.Embed(
                        title="‚úÖ C√¢mera/Transmiss√£o Religada!",
                        description=f"√ìtimo, {member.mention}! Voc√™ religou sua c√¢mera ou transmiss√£o a tempo!",
                        color=0x00FF00  # Verde
                    )
                    embed.add_field(
                        name="‚è±Ô∏è Tempo para religar",
                        value=f"{time_taken} segundos",
                        inline=True
                    )
                    embed.add_field(
                        name="üìö Status",
                        value="‚úÖ Continue estudando!",
                        inline=True
                    )
                    embed.set_footer(text="Mantenha sempre ligada! üìñ‚ú®")

                    await monitor_info['warning_message'].edit(embed=embed, content="")

                    # Deletar mensagem ap√≥s 20 segundos
                    asyncio.create_task(
                        self._delete_message_after_delay(monitor_info['warning_message'], 30)
                    )
                except Exception as e:
                    print(f"Erro ao atualizar mensagem de sucesso cont√≠nuo: {e}")

            # Resetar estado de aviso
            self.continuous_monitoring[member_id].update({
                'warning_active': False,
                'warning_task': None,
                'warning_message': None
            })

        except Exception as e:
            print(f"Erro ao cancelar aviso cont√≠nuo: {e}")

    async def _continuous_warning_countdown(self, member, warning_message):
        """Countdown para aviso cont√≠nuo com expuls√£o autom√°tica"""
        try:
            start_time = time.time()
            last_update = self.warning_time + 1

            while True:
                elapsed = time.time() - start_time
                remaining = max(0, int(self.warning_time - elapsed))

                print(f"[CONTINUOUS] {member.display_name}: Elapsed={elapsed:.1f}s, Remaining={remaining}s")

                # Tempo esgotado - expulsar
                if elapsed >= self.warning_time:
                    print(f"[CONTINUOUS] Tempo esgotado para {member.display_name}! Expulsando...")
                    await self._kick_member_continuous(member, warning_message)
                    return

                # Verificar se ainda est√° no canal e sem c√¢mera/transmiss√£o
                try:
                    guild = self.client.get_guild(Config.ID_DO_SERVIDOR)
                    if not guild:
                        return

                    current_member = guild.get_member(member.id)
                    if not current_member or not current_member.voice:
                        return

                    if current_member.voice.channel.id != self.study_cam_channel_id:
                        return

                    # Se ligou c√¢mera/transmiss√£o, vai ser tratado em _handle_study_cam_update
                    if self._has_camera_or_screen_share(current_member.voice):
                        return

                except Exception as e:
                    print(f"[CONTINUOUS] Erro ao verificar estado: {e}")
                    return

                # Atualizar countdown na mensagem
                should_update = False
                update_intervals = [30, 20, 15, 10, 5, 3, 2, 1]

                for interval in update_intervals:
                    if remaining <= interval and last_update > interval:
                        should_update = True
                        last_update = interval
                        break

                if should_update:
                    try:
                        original_embed = warning_message.embeds[0]
                        embed = discord.Embed(
                            title=original_embed.title,
                            description=original_embed.description,
                            color=0xFF0000 if remaining <= 10 else 0xFF6B35
                        )

                        # Recriar campos exceto tempo restante
                        for field in original_embed.fields:
                            if field.name != "‚è∞ Tempo restante":
                                embed.add_field(name=field.name, value=field.value, inline=field.inline)

                        embed.add_field(
                            name="‚è∞ Tempo restante",
                            value=self._format_time_remaining(remaining),
                            inline=False
                        )

                        embed.set_thumbnail(url=original_embed.thumbnail.url if original_embed.thumbnail else None)
                        embed.set_footer(text=original_embed.footer.text if original_embed.footer else None)

                        await warning_message.edit(embed=embed)
                    except Exception as e:
                        print(f"Erro ao atualizar countdown cont√≠nuo: {e}")

                await asyncio.sleep(1.0)

        except asyncio.CancelledError:
            print(f"Aviso cont√≠nuo cancelado para {member}")
        except Exception as e:
            print(f"Erro no countdown cont√≠nuo: {e}")

    async def _kick_member_continuous(self, member, warning_message):
        """Expulsa membro por desligar c√¢mera/transmiss√£o durante o uso"""
        try:
            guild = self.client.get_guild(Config.ID_DO_SERVIDOR)
            if not guild:
                return

            current_member = guild.get_member(member.id)
            if not current_member or not current_member.voice:
                return

            if current_member.voice.channel.id != self.study_cam_channel_id:
                return

            if self._has_camera_or_screen_share(current_member.voice):
                return

            print(f"Expulsando {current_member} por desligar c√¢mera/transmiss√£o")

            # Marcar como expulso
            self.bot_kicked_members.add(member.id)

            # Atualizar mensagem
            try:
                embed = discord.Embed(
                    title="‚ùå Expulso - C√¢mera Desligada",
                    description=f"{member.mention}, voc√™ foi expulso por **desligar** sua c√¢mera/transmiss√£o durante o uso do canal [https://discord.com/channels/1013854219058544720/1380897477108039740].",
                    color=0xFF0000
                )
                embed.add_field(
                    name="üìã Motivo",
                    value="üî¥ Desligou c√¢mera/transmiss√£o e n√£o religou em 60 segundos",
                    inline=False
                )
                embed.add_field(
                    name="üîÑ Como voltar",
                    value="Entre novamente e ligue a c√¢mera/transmiss√£o!",
                    inline=False
                )
                embed.set_footer(text="‚ö†Ô∏è Mantenha sempre ligada no canal de estudo!")

                await warning_message.edit(embed=embed, content="")
            except Exception as e:
                print(f"Erro ao atualizar mensagem de expuls√£o cont√≠nua: {e}")

            # Expulsar
            await current_member.move_to(None)

            # Limpar monitoramento
            if member.id in self.continuous_monitoring:
                del self.continuous_monitoring[member.id]

            # Deletar mensagem ap√≥s 60 segundos
            asyncio.create_task(self._delete_message_after_delay(warning_message, 60))

        except Exception as e:
            print(f"Erro na expuls√£o cont√≠nua: {e}")

    async def _delete_message_after_delay(self, message, delay_seconds):
        """Deleta uma mensagem ap√≥s um delay espec√≠fico"""
        try:
            await asyncio.sleep(delay_seconds)
            await message.delete()
        except Exception as e:
            print(f"Erro ao deletar mensagem ap√≥s {delay_seconds}s: {e}")

    async def get_stats(self):
        """Retorna estat√≠sticas do sistema"""
        return {
            "active_monitoring": len(self.monitoring_members),
            "continuous_monitoring": len(self.continuous_monitoring),
            "warning_time": self.warning_time,
            "kicked_members_count": len(self.bot_kicked_members)
        }